// This string is autogenerated by ChangeAppSettings.sh, do not change spaces amount
package org.libsdl.app;

import android.widget.TextView;
import org.apache.http.client.methods.*;
import org.apache.http.*;
import org.apache.http.impl.*;
import org.apache.http.impl.client.*;
import org.socool.pal.R;
import java.util.zip.*;
import java.io.*;

import java.io.BufferedInputStream;
import java.io.IOException;
import java.io.InputStream;

/**
 * CountingInputStream
 * @author $Author: jeffdrost $
 * @version $Revision: 1.7 $
 * @deprecated
 */
class CountingInputStream extends BufferedInputStream {

	private long bytesReadMark = 0;
	private long bytesRead = 0;

	public CountingInputStream(InputStream in, int size) {

		super(in, size);
	}

	public CountingInputStream(InputStream in) {

		super(in);
	}

	public long getBytesRead() {

		return bytesRead;
	}

	public synchronized int read() throws IOException {

		int read = super.read();
		if (read >= 0) {
			bytesRead++;
		}
		return read;
	}

	public synchronized int read(byte[] b, int off, int len) throws IOException {

		int read = super.read(b, off, len);
		if (read >= 0) {
			bytesRead += read;
		}
		return read;
	}

	public synchronized long skip(long n) throws IOException {

		long skipped = super.skip(n);
		if (skipped >= 0) {
			bytesRead += skipped;
		}
		return skipped;
	}

	public synchronized void mark(int readlimit) {

		super.mark(readlimit);
		bytesReadMark = bytesRead;
	}

	public synchronized void reset() throws IOException {

		super.reset();
		bytesRead = bytesReadMark;
	}
}


public class DataDownloader extends Thread
{
	class StatusWriter
	{
		private TextView Status;
		private SDLActivity Parent;

		public StatusWriter( TextView _Status, SDLActivity _Parent )
		{
			Status = _Status;
			Parent = _Parent;
		}
		
		public void setText(final String str)
		{
			class Callback implements Runnable
			{
				public TextView Status;
				public String text;
				public void run()
				{
					Status.setText(text);
				}
			}
			Callback cb = new Callback();
			cb.text = new String(str);
			cb.Status = Status;
			Parent.runOnUiThread(cb);
		}
		
	}
	public DataDownloader( SDLActivity _Parent, TextView _Status )
	{
		Parent = _Parent;
		DownloadComplete = false;
		Status = new StatusWriter( _Status, _Parent );
		Status.setText( "Connecting to " + Globals.DataDownloadUrl );
		this.start();
	}

	@Override
	public void run() 
	{
	
		String path = getOutFilePath("DownloadFinished.flag");
		InputStream checkFile = null;
		try {
			checkFile = new FileInputStream( path );
		} catch( FileNotFoundException e ) {
		} catch( SecurityException e ) { };
		if( checkFile != null )
		{
			Status.setText( "No need to download" );
			DownloadComplete = true;
//			SDLActivity.nativeInit();
			return;
		}
		checkFile = null;
		
		// Create output directory
		if( Globals.DownloadToSdcard )
		{
			try {
				(new File( "/sdcard/" + Globals.ApplicationName )).mkdirs();
			} catch( SecurityException e ) { };
		}
		else
		{
			try {
				FileOutputStream dummy = Parent.openFileOutput( "dummy", Parent.MODE_WORLD_READABLE );
				dummy.write(0);
				dummy.flush();
			} catch( FileNotFoundException e ) {
			} catch( java.io.IOException e ) {};
		}
		
		HttpGet request = new HttpGet(Globals.DataDownloadUrl);
		request.addHeader("Accept", "*/*");
		HttpResponse response = null;
		try {
			DefaultHttpClient client = new DefaultHttpClient();
			client.getParams().setBooleanParameter("http.protocol.handle-redirects", true);
			response = client.execute(request);
		} catch (IOException e) { } ;
		if( response == null )
		{
			Status.setText( "Error connecting to " + Globals.DataDownloadUrl );
			return;
		}

		Status.setText( "Downloading data from " + Globals.DataDownloadUrl );
		long totalLen = response.getEntity().getContentLength();
		CountingInputStream stream;
		try {
			stream = new CountingInputStream(response.getEntity().getContent());
		} catch( java.io.IOException e ) {
			Status.setText( "Error downloading data from " + Globals.DataDownloadUrl );
			return;
		}
		
		ZipInputStream zip = null;
			zip = new ZipInputStream(stream);
		
		byte[] buf = new byte[16384];
		
		ZipEntry entry = null;

		while(true)
		{
			entry = null;
			try {
				entry = zip.getNextEntry();
			} catch( java.io.IOException e ) {
				Status.setText( "Error downloading data from " + Globals.DataDownloadUrl );
				return;
			}
			if( entry == null )
				break;
			if( entry.isDirectory() )
			{
				try {
					(new File( getOutFilePath(entry.getName()) )).mkdirs();
				} catch( SecurityException e ) { };
				continue;
			}
			
			OutputStream out = null;
			path = getOutFilePath(entry.getName());
			
			try {
				out = new FileOutputStream( path );
			} catch( FileNotFoundException e ) {
			} catch( SecurityException e ) { };
			if( out == null )
			{
				Status.setText( "Error writing to " + path );
				return;
			}

			String percent = "";
			if( totalLen > 0 )
				percent = String.valueOf(stream.getBytesRead() * 100 / totalLen) + "%: ";
			Status.setText( percent + "writing file " + path );
			
			try {
				int len = zip.read(buf);
				while (len > 0)
				{
					out.write(buf, 0, len);
					len = zip.read(buf);

					percent = "";
					if( totalLen > 0 )
						percent = String.valueOf(stream.getBytesRead() * 100 / totalLen) + "%: ";
					Status.setText( percent + "writing file " + path );
				}
				out.flush();
				out.close();
			} catch( java.io.IOException e ) {
				Status.setText( "Error writing file " + path );
				return;
			}

		}

		OutputStream out = null;
		path = getOutFilePath("DownloadFinished.flag");
		try {
			out = new FileOutputStream( path );
			out.write(0);
			out.flush();
			out.close();
		} catch( FileNotFoundException e ) {
		} catch( SecurityException e ) {
		} catch( java.io.IOException e ) {
			Status.setText( "Error writing file " + path );
			return;
		};
		
		if( out == null )
		{
			Status.setText( "Error writing to " + path );
			return;
		}
	
		Status.setText( "Finished" );
		DownloadComplete = true;
		
		try {
			stream.close();
		} catch( java.io.IOException e ) {
		};
	};
	
	private String getOutFilePath(final String filename)
	{
		if( Globals.DownloadToSdcard )
			return	"/sdcard/" + Globals.ApplicationName + "/" + filename;
		return Parent.getFilesDir().getAbsolutePath() + "/" + filename;
	};
	
	public boolean DownloadComplete;
	public StatusWriter Status;
	private SDLActivity Parent;
}

